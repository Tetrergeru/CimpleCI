#Lex
; Comment		 = "//.*\n"
; Extern		 = "#.*\n"
  Type 			 = "u64"
  OpenCurly 	 = "\{"
  CloseCurly 	 = "\}"
  OpenPar		 = "\("
  ClosePar		 = "\)"
  OpenSquare	 = "\["
  CloseSquare	 = "\]"
  Colon 		 = ";"
  Coma 			 = ","
  If			 = "\bif\b"
  Else			 = "\belse\b"
  While			 = "\bwhile\b"
  Return		 = "\breturn\b"
  OpAssign       = "=|(\+=)|(-=)|(\*=)|(/=)"
  OpShift        = "(>>)|(<<)"
  OpAdd          = "\+|-"
  Star           = "\*"
  OpAmpers       = "&"
  OpDiv          = "/|%"
  OpBitXor       = "^"
  OpBitNot       = "~"
  OpBitAnd       = "&"
  OpBitOr        = "\|"
  OpEq           = "(!=)|(==)"
  OpCmp          = "<|(<=)|(>=)|>"
  Const			 = "[0-9][a-zA-Z_0-9]*"
  Name 			 = "[a-zA-Z_][a-zA-Z_0-9]*"

#AST

Program {
	Functions	: *Function;
}

Function {
	Type		: Token;
	Name		: Token;
	Params		: *Param;
	Block		: CodeBlock;
}

Param {
	Name		: Token;
	Type		: Token;
}

CodeBlock {
	Operators	: *Operator;
}

Operator {}

ConditionOperator : Operator {
	Condition	: Expression;
	If			: CodeBlock;
	Else		: CodeBlock;
}

WhileOperator : Operator {
	Condition 	: Expression;
	Body		: CodeBlock;
}

DeclarationOperator : Operator {
	Name		: Token;
	Type		: Token;
}

ArrayDeclarationOperator : Operator {
	Name		: Token;
	Type		: Token;
	Size		: Token;
}

ReturnOperator : Operator {
	Value		: Expression;
}

ExpressionOperator : Operator {
	Expression	: Expression;
}

Expression { }

BinExpression : Expression {
	Left		: Expression;
	Op			: Token;
	Right		: Expression;
}

UnExpression : Expression {
	Op			: Token;
	Right		: Expression;
}

CallExpression : Expression {
	Function	: Token;
	Params		: *Expression;
}

ParExpression : Expression {
	Expr		: Expression;
}

ConstExpression : Expression {
	Value		: Token;
}

NameExpression	: Expression {
	Name		: Token;
}

#Grammar

<Program> 
		-> <Function> <Program> 
				{ $1.Functions <- $0; return $1; }
        | 	END	{ return Program(*Function()); }

<Function> 
		-> Type Name OpenPar <VariableList> ClosePar <CodeBlock>
				{ return Function($0, $1, $3, $5); }

<VariableList>
		-> Type Name Coma <VariableList>
				{ $3 <- Param($1, $0); return $3; }
        |  Type Name
				{ return *Param(Param($1, $0)); }
		| 		{ return *Param(); }

<CodeBlock>
		-> OpenCurly <CodeList> CloseCurly
				{ return CodeBlock($1); }

<CodeList> 
		-> <Operator> <CodeList> 
				{ $1 <- $0; return $1; }
        |		{ return *Operator(); }  

<Operator>
		-> If OpenPar <Expression> ClosePar <CodeBlock> Else <CodeBlock>
				{ return ConditionOperator($2, $4, $6); }
        |  Type Name Colon
				{ return DeclarationOperator($1, $0); }
		|  Type Name OpenSquare Const CloseSquare Colon
				{ return ArrayDeclarationOperator($1, $0, $3); }
		|  While OpenPar <Expression> ClosePar <CodeBlock> 
				{ return WhileOperator($2, $4); }
		|  Return <Expression> Colon
				{ return ReturnOperator($1); }
		|  <Expression> Colon
				{ return ExpressionOperator($0); }

<Expression> 
		-> <AssignmentExpression>
				{ return $0; }

<AssignmentExpression>
		-> <BitwiseXor> OpAssign <AssignmentExpression>
				{ return BinExpression($0, $1, $2); }
		|  <BitwiseXor>
				{ return $0; }

<BitwiseOr>
		-> <BitwiseXor> OpBitOr <BitwiseOr>
				{ return BinExpression($0, $1, $2); }
		|  <BitwiseXor>
				{ return $0; }

<BitwiseXor>
		-> <BitwiseAnd> OpBitXor <BitwiseXor>
				{ return BinExpression($0, $1, $2); }
		|  <BitwiseAnd>
				{ return $0; }
<BitwiseAnd>
		-> <Equality> OpBitAnd <BitwiseAnd>
				{ return BinExpression($0, $1, $2); }
		|  <Equality>
				{ return $0; }

<Equality>
		-> <Comparison> OpEq <Equality>
				{ return BinExpression($0, $1, $2); }
		|  <Comparison>
				{ return $0; }

<Comparison>
		-> <Shift> OpCmp <Comparison>
				{ return BinExpression($0, $1, $2); }
		|  <Shift>
				{ return $0; }
				
<Shift>
		-> <Addition> OpShift <Shift>
				{ return BinExpression($0, $1, $2); }
		|  <Addition>
				{ return $0; }

<Addition>
		-> <Multiplication> OpAdd <Addition>
				{ return BinExpression($0, $1, $2); }
		|  <Multiplication>
				{ return $0; }

<OpMult>
		-> OpDiv { return $0; }
		|  Star  { return $0; }

<Multiplication>
		-> <Unary> <OpMult> <Multiplication>
				{ return BinExpression($0, $1, $2); }
		|  <Unary>
				{ return $0; }

<OpUnary>
		-> OpAdd { return $0; }
		|  Star { return $0; }
		|  OpAmpers { return $0; }

<Unary>
		-> <OpUnary> <Unary>
				{ return UnExpression($0, $1); }
		|  <Primary>
				{ return $0; }

<Primary>
		-> Name OpenPar <ArgumentList> ClosePar 
				{ return CallExpression($0, $2); }
	    |  Const
				{ return ConstExpression($0); }
		|  Name
				{ return NameExpression($0); }
        |  OpenPar <Expression> ClosePar
				{ return ParExpression($1); }
		

<ArgumentList> 
		-> <Expression> Coma <ArgumentList>
				{ $2 <- $0; return $2; }
        |  <Expression>
				{ return *Expression($0); }
		| 		{ return *Expression(); }
