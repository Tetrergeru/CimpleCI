#Lex
  Colon    = ";"
  Minus    = "-"
  Plus     = "\+"
  Star     = "\*"
  LeftPar  = "\("
  RightPar = "\)"
  Name     = "[a-zA-Z_][a-zA-Z_0-9]*"
; Comment  = "/\*.*\*/"
; Space    = "\\s*"

#AST
Program {
	Exprs	: *Expression;
}

Expression {}

UnaryExpression : Expression {
	Op 		: Token;
	Right 	: Expression;
}

BinExpression : Expression {
	Left	: Expression;
	Op		: Token;
	Right	: Expression;
}

ParExpression : Expression {
	Expr	: Expression;
}

#Grammar

<Program> 
		-> <Expression> Colon <Program> 
				{ $2.Exprs <- $0; return $2; }
		|  END
				{ return Program(*Expression()); }

<Expression>
		-> <Unary> 						
				{ return $0; }

<Unary>
		-> Minus <Unary> 				
				{ return UnaryExpression($0, $1); }
		|  <Multiplication>				
				{ return $0; }

<Multiplication>
		-> <Addition> Star <Multiplication>		
				{ return BinExpression($0, $1, $2); }
		|  <Addition> 					
				{ return $0; }

<Addition>
		-> <Primary> Plus <Addition>	
				{ return BinExpression($0, $1, $2); }
		|  <Primary>					
				{ return $0; }

<Primary>
		-> LeftPar <Expression> RightPar		
				{ return ParExpression($1); }
		| Name 							
				{ return $0; }